import numpy as np
import matplotlib.pyplot as plt
def SmoothSpec(x):
    '''
    INPUT:
    x: a vector of evenly spaced points x_j
    OUTPUT:
    y: a vector of spectral data corresponding to each point x_j
    '''
    import numpy as np
    n = 9
    M = [12.71,21.32,33.83,41.24,50,62.52,67.88,75.24,84.66]
    S = [1,2,1.5,2,1.5,1,2,1.5,2]
            
    sum = 0
    for i in range(n):
        G = 1/(S[i]*np.sqrt(2*np.pi))*np.exp((-1/2)*((x-M[i])/S[i])**2)
        sum = sum + G
    
    return sum

def FirstDeriv(x,y):
    '''
    Calculates the first derivative of y with respect to x using finite difference methods with error O(h^2)
    INPUTS:
    x: a vector of evenly spaced x positions
    y: a vector of corresponding y data at each position x
    OUTPUT:
    df: a vector of the first derivative calculated at each point in x
    '''
    import numpy as np
    n = len(x)
    dx = x[1]-x[0]
    df = np.zeros(n)
    for i in range(n):
        if i == 0:
            df[i] = (-3*y[i] + 4*y[i+1] - y[i+2])/(2*dx)
        if i == n-1:
            df[i] = (y[i-2]-4*y[i-1]+3*y[i])/(2*dx)
        else:
            df[i] = (y[i+1] - y[i-1])/(2*dx)

    return df

def SecondDeriv(x,y):
    '''
    Calculates the second derivative of y with respect to x using finite difference methods with error O(h^2)
    INPUTS:
    x: a vector of evenly spaced x positions
    y: a vector of corresponding y data at each position x
    OUTPUT:
    df: a vector of the second derivative calculated at each point in x
    '''
    import numpy as np
    n = len(x)
    dx = x[1]-x[0]
    d2f = np.zeros(n)
    for i in range(n):
        if i == 0:
            d2f[i] = (2*y[i] - 5*y[i+1] + 4*y[i+2] - y[i+3])/(dx**2)
        if i == n-1:
            d2f[i] = (-y[i-3] + 4*y[i-2] - 5*y[i-1] + 2*y[i])/(dx**2)
        else:
            d2f[i] = (y[i-1] - 2*y[i] + y[i+1])/(dx**2)

    return d2f

def PeakFinder(x, y, dy, d2y):
    """
    Identifies peaks in the smoothed spectrum that satisfy the specified conditions.
    
    INPUTS:
    x: a vector of x values
    y: a vector of y values
    dy: the first derivative of y
    d2y: the second derivative of y
    
    OUTPUT:
    peaks: a list of x values where peaks are located
    """
    peaks = []
    y_mean = np.mean(y) 

    for j in range(1, len(x) - 1):
        if (
            y[j] > y_mean and           
            dy[j] * dy[j + 1] < 0 and       
            d2y[j] < 0                      
        ):
            peaks.append((x[j], y[j])) 

    return peaks

def RoughSpec(x):
    '''
    INPUT:
    x: a vector of evenly spaced points x_j
    OUTPUT:
    y: a vector of spectral data corresponding to each point x_j
    '''

    import numpy as np
    
    n = 9
    S = np.zeros(n)
    M = np.zeros(n)
    y = 0
    
    for i in range(n):
        S[i] = np.random.rand()+1
        if i == 0:
            M[i] = np.random.rand()*10 + 5
        else:
            M[i] = M[i-1] + np.random.rand()*10 + 2
            
        G = 1/(S[i]*np.sqrt(2*np.pi))*np.exp((-1/2)*((x-M[i])/S[i])**2)
        y = y + G

    for i in range(len(y)):
        y[i] = y[i] + np.random.rand()*0.02-0.01
    
    return y

def SGF(x, y, m, n):
    Z_max = (m - 1) // 2 
     
    z = np.arange(-Z_max, Z_max + 1)
    J = np.zeros((m, n + 1))
    for i in range(m):
        for j in range(n + 1):
            J[i, j] = z[i] ** j  
 
    C = np.linalg.inv(J.T @ J) @ J.T
    a = C[0, :]

    N = len(y)
    X = x[Z_max:N - Z_max]
    Y = np.zeros(len(X))
 
    for j in range(Z_max, N - Z_max):
        Y[j - Z_max] = np.sum(a * y[j - Z_max:j + Z_max + 1])

    return X, Y

x = np.linspace(0, 90, 2001)
y = RoughSpec(x)
 
m = 51   
n = 3   

X, Y = SGF(x, y, m, n)

plt.figure(figsize=(10, 6))
plt.plot(x, y, linewidth=0.5, label='Original Data', color="red")
plt.plot(X, Y, linewidth=1, label='Smoothed Data', color="black")
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Original vs Smoothed Data')
plt.grid(True)
plt.show()
